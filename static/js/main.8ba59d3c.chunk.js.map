{"version":3,"sources":["game/BoardStatus.ts","components/Cell.tsx","components/Piece.tsx","components/Board.tsx","game/Direction.ts","game/Piece.ts","game/Position.ts","game/Bishop.ts","state/BishopState.ts","game/Knight.ts","state/KnightState.ts","game/Queen.ts","state/QueenState.ts","game/Rook.ts","state/RookState.ts","components/PromotionDialog.tsx","components/Game.tsx","game/King.ts","game/Board.ts","state/KingState.ts","game/Pawn.ts","state/PawnState.ts","state/BoardState.ts","game/Game.ts","state/GameState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BoardStatus","Cell","position","selected","available","children","onClick","handleClick","useCallback","color","x","y","className","classNames","title","code","pieces","observer","piece","onSelect","select","name","board","selectedPiece","onPieceSelect","onPieceMove","availableMoves","getAvailableMoves","move","columns","map","column","key","rows","row","cells","cell","get","find","Direction","PieceColor","Position","this","toXY","width","height","direction","Up","up","Down","down","Left","left","Right","right","LeftUp","LeftDown","RightUp","RightDown","fromXY","charCodeAt","xCode","toColumn","yCode","toRow","String","fromCharCode","toCode","Piece","getAllMoves","filter","updatedBoard","copy","set","kingIsAttacked","isOK","isOpponent","moves","to","canMove","push","Bishop","diagonal","concat","getMovesTowards","decorate","BishopState","observable","Knight","KnightState","Queen","QueenState","Rook","line","RookState","queenPosition","blackQueen","Black","whiteQueen","White","knightPosition","blackKnight","whiteKnight","rookPosition","blackRook","whiteRook","bishopPosition","blackBishop","whiteBishop","PromotionDialog","chooseQueen","chooseKnight","chooseRook","chooseBishop","open","game","selectPiece","movePiece","promotePawn","promotion","boardStatus","None","toString","isOver","winner","promoting","King","Board","Map","previous","delete","entries","value","kingPosition","king","Error","length","some","Stalemate","Check","Checkmate","Array","from","values","KingState","Pawn","attackDirection","leftCapture","rightCapture","forward","initialRow","next","PawnState","BoardState","computed","put","action","bound","Game","currentTurn","opponent","checkmate","canBePromoted","passTurn","pawn","GameState","whitePawn","blackPawn","whiteKing","leftWhiteKnight","rightWhiteKnight","leftWhiteRook","rightWhiteRook","leftWhiteBishop","rightWhiteBishop","blackKing","leftBlackKnight","rightBlackKnight","leftBlackRook","rightBlackRook","leftBlackBishop","rightBlackBishop","initChessBoard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ba59d3c.chunk.js","sourcesContent":["\nenum BoardStatus {\n  None = \"none\",\n  Check = \"check\",\n  Checkmate = \"checkmate\",\n  Stalemate = \"stalemate\"\n}\n\nexport default BoardStatus;","import classNames from \"classnames\";\nimport React, { useCallback } from \"react\";\nimport Position from \"../game/Position\";\nimport \"./Cell.sass\";\n\nexport interface CellProps {\n  position: Position;\n  selected?: boolean;\n  available?: boolean;\n  onClick(position: Position): void;\n}\n\nconst Cell: React.FC<CellProps> = ({ position, selected, available, children, onClick }) => {\n  const handleClick = useCallback(() => {\n    if (available) {\n      onClick(position);\n    }\n  }, [position, available, onClick]);\n\n  const color = (position.x + position.y) % 2 === 0 ? \"black\" : \"white\";\n  return (\n    <div\n      className={classNames(\"cell\", `cell_${color}`, { \"cell_selected\": selected, \"cell_available\": available })}\n      title={position.code}\n      onClick={handleClick}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Cell;","import GamePiece from \"../game/Piece\";\nimport React, { useCallback } from \"react\";\nimport \"./Piece.sass\";\nimport { observer } from \"mobx-react\";\n\nexport interface PieceProps {\n  piece: GamePiece;\n  onSelect(piece: GamePiece | null): void;\n}\n\nconst Piece: React.FC<PieceProps> = ({ piece, onSelect }) => {\n  const select = useCallback(() => {\n    onSelect(piece.selected ? null : piece);\n  }, [piece, onSelect])\n\n  return (\n    <div\n      className={`piece piece_${piece.color}`}\n      onClick={select}\n    >\n      {pieces[piece.name]}\n    </div>\n  )\n}\n\nconst pieces: { [name: string]: string } = {\n  \"king\": \"♚\",\n  \"queen\": \"♛\",\n  \"rook\": \"♜\",\n  \"bishop\": \"♝\",\n  \"knight\": \"♞\",\n  \"pawn\": \"♟︎\",\n}\n\nexport default observer(Piece);","import { observer } from \"mobx-react\";\nimport React, { useCallback } from \"react\";\nimport GamePiece from \"../game/Piece\";\nimport Position from \"../game/Position\";\nimport BoardState from \"../state/BoardState\";\nimport \"./Board.sass\";\nimport Cell from \"./Cell\";\nimport Piece from \"./Piece\";\n\nexport interface BoardProps {\n  board: BoardState;\n  selectedPiece: GamePiece | null;\n  onPieceSelect(piece: GamePiece): void;\n  onPieceMove(piece: GamePiece, position: Position): void;\n}\n\nconst Board: React.FC<BoardProps> = ({ board, selectedPiece, onPieceSelect, onPieceMove }) => {\n  const availableMoves = selectedPiece?.getAvailableMoves(board) ?? [];\n\n  const move = useCallback((position: Position) => {\n    onPieceMove(selectedPiece!, position);\n  }, [onPieceMove, selectedPiece]);\n\n  return (\n    <div className={\"board\"}>\n      <div className={\"board__columns\"}>\n        {board.columns.map((column) =>\n          <div key={column} className={\"board__column\"}>\n            {column}\n          </div>\n        )}\n      </div>\n\n      <div className={\"board__rows\"}>\n        {board.rows.map((row) =>\n          <div key={row} className={\"board__row\"}>\n            {row}\n          </div>\n        )}\n      </div>\n\n      <div className={\"board__desk\"}>\n        {board.cells.map((cell) => {\n          const piece = board.get(cell);\n          return (\n            <Cell\n              key={cell.code}\n              position={cell}\n              selected={selectedPiece === piece}\n              available={!!availableMoves.find(move => move.code === cell.code)}\n              onClick={move}\n            >\n              {piece && <Piece piece={piece} onSelect={onPieceSelect} />}\n            </Cell>\n          );\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default observer(Board);","enum Direction {\n  Left = 1,\n  Up = 2,\n  Right = 4,\n  Down = 7,\n  LeftUp = 3,\n  LeftDown = 8,\n  RightUp = 6,\n  RightDown = 11\n}\n\nexport default Direction;","import Board from \"./Board\";\nimport Direction from \"./Direction\";\nimport Position from \"./Position\";\n\nexport enum PieceColor {\n  White = \"white\",\n  Black = \"black\"\n}\n\nexport default abstract class Piece {\n  public position: Position;\n  public color: PieceColor;\n  public selected: boolean = false;\n\n  public constructor(position: Position | Position[\"code\"], color: PieceColor) {\n    if (typeof position === \"string\") {\n      this.position = new Position(position);\n    } else {\n      this.position = position;\n    }\n\n    this.color = color;\n  }\n\n  public abstract get name(): string;\n  public abstract getAllMoves(board: Board): Position[];\n\n  public getAvailableMoves(board: Board): Position[] {\n    const moves = this.getAllMoves(board);\n    return moves.filter((move) => {\n      const updatedBoard = board.copy();\n      updatedBoard.set(move, this);\n      return !updatedBoard.kingIsAttacked(this.color);\n    });\n  }\n\n  public isOpponent(piece: Piece): boolean {\n    return this.color !== piece.color;\n  }\n\n  protected canMove(position: Position, board: Board): boolean {\n    if (!position.isOK(board)) {\n      return false;\n    }\n\n    const piece = board.get(position);\n    return !piece || piece.isOpponent(this);\n  }\n\n  protected getMovesTowards(direction: Direction, board: Board): Position[] {\n    const moves: Position[] = [];\n\n    let piece: Piece | undefined;\n    let move = this.position.to(direction);\n    while (!piece && move.isOK(board)) {\n      if (this.canMove(move, board)) {\n        moves.push(move);\n      }\n      piece = board.get(move);\n      move = move.to(direction);\n    }\n\n    return moves;\n  }\n}","import Board from \"./Board\";\nimport Direction from \"./Direction\";\n\n/**\n * Represents a board position in a chess format:\n * G4, A7, B6 and etc.\n */\nexport default class Position {\n  public readonly code: string;\n  public readonly x: number;\n  public readonly y: number;\n\n  constructor(code: string) {\n    this.code = code;\n    [this.x, this.y] = Position.toXY(code);\n  }\n\n  public isOK(board: Board): boolean {\n    return this.x >= 0 && this.x < board.width && this.y >= 0 && this.y < board.height; \n  }\n\n  public to(direction: Direction): Position {\n    switch (direction) {\n      case Direction.Up: return this.up();\n      case Direction.Down: return this.down();\n      case Direction.Left: return this.left();\n      case Direction.Right: return this.right();\n      case Direction.LeftUp: return this.left().up();\n      case Direction.LeftDown: return this.left().down();\n      case Direction.RightUp: return this.right().up();\n      case Direction.RightDown: return this.right().down();\n    }\n  }\n\n  public up(): Position {\n    return Position.fromXY(this.x, this.y + 1);\n  }\n\n  public down(): Position {\n    return Position.fromXY(this.x, this.y - 1);\n  }\n\n  public left(): Position {\n    return Position.fromXY(this.x - 1, this.y);\n  }\n\n  public right(): Position {\n    return Position.fromXY(this.x + 1, this.y);\n  }\n\n  public static toXY(code: string): [number, number] {\n    const x = code.charCodeAt(0) - \"A\".charCodeAt(0);\n    const y = code.charCodeAt(1) - \"1\".charCodeAt(0);\n    return [x, y];\n  }\n\n  public static toCode(x: number, y: number): string {\n    const xCode = Position.toColumn(x);\n    const yCode = Position.toRow(y);\n    return `${xCode}${yCode}`;\n  }\n\n  public static toColumn(x: number): string {\n    return String.fromCharCode(x + \"A\".charCodeAt(0));\n  }\n\n  public static toRow(y: number): string {\n    return String.fromCharCode(y + \"1\".charCodeAt(0));\n  }\n\n  public static fromXY(x: number, y: number): Position {\n    const code = Position.toCode(x, y);\n    return new Position(code);\n  }\n\n  public toString() {\n    return this.code;\n  }\n}\n\n","import Piece from \"./Piece\";\nimport Position from \"./Position\";\nimport Direction from \"./Direction\";\nimport Board from \"./Board\";\n\n\nexport default class Bishop extends Piece {\n  public get name(): string {\n    return \"bishop\";\n  }\n\n  public getAllMoves(board: Board): Position[] {\n    const diagonals = [\n      Direction.LeftUp,\n      Direction.LeftDown,\n      Direction.RightUp,\n      Direction.RightDown\n    ];\n\n    let availableMoves: Position[] = [];\n    for (const diagonal of diagonals) {\n      availableMoves = availableMoves.concat(this.getMovesTowards(diagonal, board));\n    }\n    return availableMoves;\n  }\n}","import { decorate, observable } from \"mobx\";\r\nimport BishopState from \"../game/Bishop\";\r\n\r\ndecorate(BishopState, {\r\n  position: observable,\r\n  color:    observable,\r\n});\r\n\r\nexport default BishopState;","import Piece from \"./Piece\";\nimport Position from \"./Position\";\nimport Board from \"./Board\";\n\n\nexport default class Knight extends Piece {\n  public get name(): string {\n    return \"knight\";\n  }\n\n  public getAllMoves(board: Board): Position[] {\n    const moves = [\n      this.position.up().left().left(),\n      this.position.up().right().right(),\n      this.position.down().left().left(),\n      this.position.down().right().right(),\n      this.position.up().up().left(),\n      this.position.up().up().right(),\n      this.position.down().down().left(),\n      this.position.down().down().right()\n    ];\n\n    const availableMoves = [];\n    for (const position of moves) {\n      if (this.canMove(position, board)) {\n        availableMoves.push(position);\n      }\n    }\n\n    return availableMoves;\n  }\n}","import { decorate, observable } from \"mobx\";\r\nimport KnightState from \"../game/Knight\";\r\n\r\ndecorate(KnightState, {\r\n  position: observable,\r\n  color:    observable,\r\n});\r\n\r\nexport default KnightState;","import Piece from \"./Piece\";\nimport Position from \"./Position\";\nimport Direction from \"./Direction\";\nimport Board from \"./Board\";\n\nexport default class Queen extends Piece {\n  public get name(): string {\n    return \"queen\";\n  }\n\n  public getAllMoves(board: Board): Position[] {\n    const directions = [\n      Direction.Left,\n      Direction.Right,\n      Direction.Up,\n      Direction.Down,\n      Direction.LeftUp,\n      Direction.LeftDown,\n      Direction.RightUp,\n      Direction.RightDown\n    ];\n\n    let availableMoves: Position[] = [];\n    for (const direction of directions) {\n      availableMoves = availableMoves.concat(this.getMovesTowards(direction, board));\n    }\n    return availableMoves;\n  }\n}","import { decorate, observable } from \"mobx\";\r\nimport QueenState from \"../game/Queen\";\r\n\r\ndecorate(QueenState, {\r\n  position: observable,\r\n  color:    observable,\r\n});\r\n\r\nexport default QueenState;","import Piece from \"./Piece\";\nimport Position from \"./Position\";\nimport Direction from \"./Direction\";\nimport Board from \"./Board\";\n\n\nexport default class Rook extends Piece {\n  public get name(): string {\n    return \"rook\";\n  }\n\n  public getAllMoves(board: Board): Position[] {\n    const lines = [\n      Direction.Left,\n      Direction.Right,\n      Direction.Up,\n      Direction.Down\n    ];\n\n    let availableMoves: Position[] = [];\n    for (const line of lines) {\n      availableMoves = availableMoves.concat(this.getMovesTowards(line, board));\n    }\n    return availableMoves;\n  }\n}","import { decorate, observable } from \"mobx\";\r\nimport RookState from \"../game/Rook\";\r\n\r\ndecorate(RookState, {\r\n  position: observable,\r\n  color:    observable,\r\n});\r\n\r\nexport default RookState;","import React, { useCallback } from \"react\";\r\nimport { PawnPromotion } from \"../game/Pawn\";\r\nimport { PieceColor } from \"../game/Piece\";\r\nimport Position from \"../game/Position\";\r\nimport BishopState from \"../state/BishopState\";\r\nimport KnightState from \"../state/KnightState\";\r\nimport QueenState from \"../state/QueenState\";\r\nimport RookState from \"../state/RookState\";\r\nimport Cell from \"./Cell\";\r\nimport Piece from \"./Piece\";\r\nimport \"./PromotionDialog.sass\";\r\n\r\n\r\nexport interface PromotionDialogProps {\r\n  color: PieceColor;\r\n  onSelect(promotion: PawnPromotion): void;\r\n}\r\n\r\nconst PromotionDialog: React.FC<PromotionDialogProps> = ({ color, onSelect }) => {\r\n  const chooseQueen = useCallback(() => {\r\n    onSelect(QueenState);\r\n  }, [onSelect]);\r\n\r\n  const chooseKnight = useCallback(() => {\r\n    onSelect(KnightState);\r\n  }, [onSelect]);\r\n\r\n  const chooseRook = useCallback(() => {\r\n    onSelect(RookState);\r\n  }, [onSelect]);\r\n\r\n  const chooseBishop = useCallback(() => {\r\n    onSelect(BishopState);\r\n  }, [onSelect]);\r\n\r\n  return (\r\n    <dialog open className={\"promotion-dialog\"}>\r\n      Select promotion:\r\n\r\n      <div className={\"promotion-dialog__chooses\"}>\r\n        <Cell position={queenPosition} onClick={chooseQueen}>\r\n          <Piece piece={color === PieceColor.Black ? blackQueen : whiteQueen} onSelect={chooseQueen} />\r\n        </Cell>\r\n\r\n        <Cell position={knightPosition} onClick={chooseKnight}>\r\n          <Piece piece={color === PieceColor.Black ? blackKnight : whiteKnight} onSelect={chooseKnight} />\r\n        </Cell>\r\n\r\n        <Cell position={rookPosition} onClick={chooseRook}>\r\n          <Piece piece={color === PieceColor.Black ? blackRook : whiteRook} onSelect={chooseRook} />\r\n        </Cell>\r\n\r\n        <Cell position={bishopPosition} onClick={chooseBishop}>\r\n          <Piece piece={color === PieceColor.Black ? blackBishop : whiteBishop} onSelect={chooseBishop} />\r\n        </Cell>\r\n      </div>\r\n    </dialog>\r\n  );\r\n}\r\n\r\nconst queenPosition = new Position(\"A1\");\r\nconst blackQueen = new QueenState(queenPosition, PieceColor.Black);\r\nconst whiteQueen = new QueenState(queenPosition, PieceColor.White);\r\n\r\nconst knightPosition = new Position(\"A2\");\r\nconst blackKnight = new KnightState(knightPosition, PieceColor.Black);\r\nconst whiteKnight = new KnightState(knightPosition, PieceColor.White);\r\n\r\nconst rookPosition = new Position(\"A3\");\r\nconst blackRook = new RookState(rookPosition, PieceColor.Black);\r\nconst whiteRook = new RookState(rookPosition, PieceColor.White);\r\n\r\nconst bishopPosition = new Position(\"A4\");\r\nconst blackBishop = new BishopState(bishopPosition, PieceColor.Black);\r\nconst whiteBishop = new BishopState(bishopPosition, PieceColor.White);\r\n\r\nexport default PromotionDialog;","import { observer } from \"mobx-react\";\nimport React, { useCallback } from \"react\";\nimport Board from \"../components/Board\";\nimport BoardStatus from \"../game/BoardStatus\";\nimport { PawnPromotion } from \"../game/Pawn\";\nimport GamePiece from \"../game/Piece\";\nimport Position from \"../game/Position\";\nimport GameState from \"../state/GameState\";\nimport \"./Game.sass\";\nimport PromotionDialog from \"./PromotionDialog\";\n\n\nexport interface GameProps {\n  game: GameState;\n}\n\nconst Game: React.FC<GameProps> = ({ game }) => {\n  const selectPiece = useCallback((piece: GamePiece | null) => {\n    game.select(piece);\n  }, [game]);\n\n  const movePiece = useCallback((piece: GamePiece, position: Position) => {\n    game.move(piece, position);\n  }, [game]);\n\n  const promotePawn = useCallback((promotion: PawnPromotion) => {\n    game.promotePawn(promotion);\n  }, [game]);\n\n  return (\n    <main className={\"game\"}>\n      <Board\n        board={game.board}\n        selectedPiece={game.selectedPiece}\n        onPieceSelect={selectPiece}\n        onPieceMove={movePiece}\n      />\n\n      <div className={\"game__status\"}>\n        {game.boardStatus !== BoardStatus.None ? game.boardStatus.toString() : \"\"}\n      </div>\n\n      <div className={\"game__winner\"}>\n        {game.isOver ? game.winner ?\n          <>\n            <span className={\"game__winner__color\"}>${game.winner}</span> is the winner.\n          </> : \"Draw\" : \"\"}\n      </div>\n\n      {game.promoting &&\n        <PromotionDialog color={game.promoting.color} onSelect={promotePawn} />\n      }\n    </main>\n  )\n}\n\nexport default observer(Game);","import Board from \"./Board\";\nimport Direction from \"./Direction\";\nimport Piece from \"./Piece\";\nimport Position from \"./Position\";\n\n\nexport default class King extends Piece {\n  public get name(): string {\n    return \"king\";\n  }\n\n  public getAllMoves(board: Board): Position[] {\n    const directions = [\n      Direction.Left,\n      Direction.Right,\n      Direction.Up,\n      Direction.Down,\n      Direction.LeftUp,\n      Direction.LeftDown,\n      Direction.RightUp,\n      Direction.RightDown\n    ];\n\n    const availableMoves: Position[] = [];\n    for (const direction of directions) {\n      const move = this.position.to(direction);\n      if (this.canMove(move, board)) {\n        availableMoves.push(move);\n      }\n    }\n\n    return availableMoves;\n  }\n\n  public getAvailableMoves(board: Board): Position[] {\n    const moves = this.getAllMoves(board);\n    return moves.filter((move) => {\n      const updatedBoard = board.copy();\n      updatedBoard.set(move, this);\n      return !updatedBoard.kingIsAttacked(this.color, move);\n    });\n  }\n}","import BoardStatus from \"./BoardStatus\";\nimport King from \"./King\";\nimport Piece, { PieceColor } from \"./Piece\";\nimport Position from \"./Position\";\n\n\nexport default class Board {\n  public board: Map<Position[\"code\"], Piece>;\n\n  public constructor(\n    public readonly width: number = 8,\n    public readonly height: number = 8\n  ) {\n    this.board = new Map<Position[\"code\"], Piece>();\n  }\n\n  public get pieces(): Piece[] {\n    return Array.from(this.board.values());\n  }\n\n  public get cells(): Position[] {\n    const cells: Position[] = [];\n    for (let y = this.height - 1; y >= 0; y--) {\n      for (let x = 0; x < this.width; x++) {\n        cells.push(Position.fromXY(x, y));\n      }\n    }\n    return cells;\n  }\n\n  public get rows(): string[] {\n    const rows: string[] = [];\n    for (let row = this.height - 1; row >= 0; row--) {\n      rows.push(Position.toRow(row));\n    }\n    return rows;\n  }\n\n  public get columns(): string[] {\n    const columns: string[] = [];\n    for (let column = 0; column < this.width; column++) {\n      columns.push(Position.toColumn(column));\n    }\n    return columns;\n  }\n\n  public get(position: Position | Position[\"code\"]): Piece | undefined {\n    let code;\n    if (position instanceof Position) {\n      code = position.code;\n    } else {\n      code = position;\n    }\n    return this.board.get(code);\n  }\n\n  public move(piece: Piece, to: Position | Position[\"code\"]): void {\n    let position: Position;\n    if (to instanceof Position) {\n      position = to;\n    } else {\n      position = new Position(to);\n    }\n\n    this.set(position, piece);\n    piece.position = position;\n  }\n\n  public put(piece: Piece): void {\n    this.set(piece.position, piece);\n  }\n\n  public set(position: Position | Position[\"code\"], piece: Piece | undefined): void {\n    let code;\n    if (position instanceof Position) {\n      code = position.code;\n    } else {\n      code = position;\n    }\n\n    if (piece) {\n      const previous = this.board.get(piece.position.code);\n      if (previous === piece) {\n        this.board.delete(previous.position.code);\n      }\n      this.board.set(code, piece);\n    } else {\n      this.board.delete(code);\n    }\n  }\n\n  public copy(): Board {\n    const board = new Board();\n    for (const [key, value] of this.board.entries()) {\n      board.set(key, value);\n    }\n    return board;\n  }\n\n  public kingIsAttacked(color: PieceColor, kingPosition?: Position): boolean {\n    let king: Piece | undefined;\n    if (kingPosition) {\n      king = this.get(kingPosition);\n    } else {\n      king = this.pieces.find(piece => piece instanceof King && piece.color === color);\n      kingPosition = king?.position;\n    }\n\n    if (!king) {\n      throw new Error(\"King was not found.\");\n    }\n\n    const attacking = this.pieces.filter(\n      piece => piece.color !== color && piece.getAllMoves(this).find(move => move.code === kingPosition!.code)\n    );\n\n    return attacking.length > 0;\n  }\n\n  public checkmate(color: PieceColor): BoardStatus {\n    if (!this.kingIsAttacked(color)) {\n      const playerHasMoves = this.pieces.some(piece => piece.color === color && piece.getAvailableMoves(this).length > 0);\n      if (playerHasMoves) {\n        return BoardStatus.None;\n      } else {\n        return BoardStatus.Stalemate;\n      }\n    }\n\n    const king = this.pieces.find(piece => piece instanceof King && piece.color === color);\n    const kingMoves = king!.getAvailableMoves(this);\n    if (kingMoves.length) {\n      return BoardStatus.Check;\n    } else {\n      const protecting = this.pieces.filter(piece =>\n        piece.color === color &&\n        piece !== king &&\n        piece.getAvailableMoves(this).length\n      );\n      if (protecting.length) {\n        return BoardStatus.Check;\n      } else {\n        return BoardStatus.Checkmate;\n      }\n    }\n  }\n}","import { decorate, observable } from \"mobx\";\r\nimport KingState from \"../game/King\";\r\n\r\ndecorate(KingState, {\r\n  position: observable,\r\n  color:    observable,\r\n});\r\n\r\nexport default KingState;","import Bishop from \"./Bishop\";\nimport Board from \"./Board\";\nimport Direction from \"./Direction\";\nimport Knight from \"./Knight\";\nimport Piece, { PieceColor } from \"./Piece\";\nimport Position from \"./Position\";\nimport Queen from \"./Queen\";\nimport Rook from \"./Rook\";\n\n\nexport default class Pawn extends Piece {\n  public get name(): string {\n    return \"pawn\";\n  }\n\n  public getAllMoves(board: Board): Position[] {\n    const availableMoves = [];\n\n    let attackDirection: Direction;\n    if (this.color === PieceColor.White) {\n      attackDirection = Direction.Up;\n    } else {\n      attackDirection = Direction.Down;\n    }\n    \n    const leftCapture = this.position.to(attackDirection + Direction.Left);\n    if (leftCapture.isOK(board)) {\n      const piece = board.get(leftCapture);\n      if (piece?.isOpponent(this)) {\n        availableMoves.push(leftCapture);\n      }\n    }\n\n    const rightCapture = this.position.to(attackDirection + Direction.Right);\n    if (rightCapture.isOK(board)) {\n      const piece = board.get(rightCapture);\n      if (piece?.isOpponent(this)) {\n        availableMoves.push(rightCapture);\n      }\n    }\n\n    const forward = this.position.to(attackDirection);\n    if (forward.isOK(board)) {\n      const piece = board.get(forward);\n      if (!piece) {\n        availableMoves.push(forward);\n      }\n\n      const initialRow = this.color === PieceColor.White ? 1 : board.height - 2;\n      if (this.position.y === initialRow) {\n        const next = forward.to(attackDirection);\n        if (next.isOK(board)) {\n          const piece = board.get(next);\n          if (!piece) {\n            availableMoves.push(next);\n          }\n        }\n      }\n    }\n\n    return availableMoves;\n  }\n\n  public canBePromoted(board: Board): boolean {\n    if (this.color === PieceColor.Black) {\n      return this.position.y === 0;\n    }\n    if (this.color === PieceColor.White) {\n      return this.position.y === board.height - 1;\n    }\n    return false;\n  }\n}\n\nexport type PawnPromotion = typeof Knight | typeof Bishop | typeof Rook | typeof Queen","import { decorate, observable } from \"mobx\";\r\nimport PawnState from \"../game/Pawn\";\r\n\r\ndecorate(PawnState, {\r\n  position: observable,\r\n  color:    observable,\r\n});\r\n\r\nexport default PawnState;","import { action, computed, decorate, observable } from \"mobx\";\r\nimport BoardState from \"../game/Board\";\r\nimport { PieceColor } from \"../game/Piece\";\r\nimport Position from \"../game/Position\";\r\nimport BishopState from \"./BishopState\";\r\nimport KingState from \"./KingState\";\r\nimport KnightState from \"./KnightState\";\r\nimport PawnState from \"./PawnState\";\r\nimport QueenState from \"./QueenState\";\r\nimport RookState from \"./RookState\";\r\n\r\n\r\ndecorate(BoardState, {\r\n  board:  observable,\r\n  cells:  computed,\r\n  pieces: computed,\r\n  put:    action.bound,\r\n  set:    action.bound,\r\n  move:   action.bound,\r\n});\r\n\r\n\r\nexport function initChessBoard(): BoardState {\r\n  const board = new BoardState();\r\n\r\n  for (let x = 0; x < board.width; x++) {\r\n    const whitePawn = new PawnState(Position.fromXY(x, 1), PieceColor.White);\r\n    board.put(whitePawn);\r\n\r\n    const blackPawn = new PawnState(Position.fromXY(x, board.height - 2), PieceColor.Black);\r\n    board.put(blackPawn);\r\n  }\r\n\r\n  const whiteKing = new KingState(\"E1\", PieceColor.White);\r\n  board.put(whiteKing);\r\n\r\n  const whiteQueen = new QueenState(\"D1\", PieceColor.White);\r\n  board.put(whiteQueen);\r\n\r\n  const leftWhiteKnight = new KnightState(\"B1\", PieceColor.White);\r\n  board.put(leftWhiteKnight);\r\n\r\n  const rightWhiteKnight = new KnightState(\"G1\", PieceColor.White);\r\n  board.put(rightWhiteKnight);\r\n\r\n  const leftWhiteRook = new RookState(\"A1\", PieceColor.White);\r\n  board.put(leftWhiteRook);\r\n\r\n  const rightWhiteRook = new RookState(\"H1\", PieceColor.White);\r\n  board.put(rightWhiteRook);\r\n\r\n  const leftWhiteBishop = new BishopState(\"C1\", PieceColor.White);\r\n  board.put(leftWhiteBishop);\r\n\r\n  const rightWhiteBishop = new BishopState(\"F1\", PieceColor.White);\r\n  board.put(rightWhiteBishop);\r\n\r\n  const blackKing = new KingState(\"E8\", PieceColor.Black);\r\n  board.put(blackKing);\r\n\r\n  const blackQueen = new QueenState(\"D8\", PieceColor.Black);\r\n  board.put(blackQueen);\r\n\r\n  const leftBlackKnight = new KnightState(\"B8\", PieceColor.Black);\r\n  board.put(leftBlackKnight);\r\n\r\n  const rightBlackKnight = new KnightState(\"G8\", PieceColor.Black);\r\n  board.put(rightBlackKnight);\r\n\r\n  const leftBlackRook = new RookState(\"A8\", PieceColor.Black);\r\n  board.put(leftBlackRook);\r\n\r\n  const rightBlackRook = new RookState(\"H8\", PieceColor.Black);\r\n  board.put(rightBlackRook);\r\n\r\n  const leftBlackBishop = new BishopState(\"C8\", PieceColor.Black);\r\n  board.put(leftBlackBishop);\r\n\r\n  const rightBlackBishop = new BishopState(\"F8\", PieceColor.Black);\r\n  board.put(rightBlackBishop);\r\n\r\n  return board;\r\n}\r\n\r\nexport function stalemateBoard(): BoardState {\r\n  const board = new BoardState();\r\n  board.put(new KingState(\"A8\", PieceColor.Black));\r\n  board.put(new KingState(\"D5\", PieceColor.White));\r\n  board.put(new QueenState(\"H7\", PieceColor.White));\r\n  return board;\r\n}\r\n\r\nexport function promoteBoard(): BoardState {\r\n  const board = new BoardState();\r\n  board.put(new PawnState(\"D7\", PieceColor.White));\r\n  board.put(new KingState(\"A1\", PieceColor.White));\r\n  board.put(new KingState(\"G8\", PieceColor.Black));\r\n  return board;\r\n}\r\n\r\nexport default BoardState;","import Board from \"./Board\";\nimport BoardStatus from \"./BoardStatus\";\nimport Pawn, { PawnPromotion } from \"./Pawn\";\nimport Piece, { PieceColor } from \"./Piece\";\nimport Position from \"./Position\";\n\nexport default class Game {\n  public readonly board: Board;\n  public boardStatus: BoardStatus;\n  public currentTurn: PieceColor;\n  public winner: PieceColor | null;\n  public selectedPiece: Piece | null;\n  public promoting: Pawn | null;\n\n  public constructor(board: Board) {\n    this.board = board;\n    this.selectedPiece = null;\n    this.currentTurn = PieceColor.White;\n    this.winner = null;\n    this.boardStatus = BoardStatus.None;\n    this.promoting = null;\n  }\n\n  public select(piece: Piece | null): void {\n    if (this.isOver) {\n      return;\n    }\n\n    if (this.selectedPiece) {\n      this.selectedPiece.selected = false;\n    }\n\n    if (!piece) {\n      this.selectedPiece = null;\n    } else if (piece.color === this.currentTurn) {\n      this.selectedPiece = piece;\n      this.selectedPiece.selected = true;\n    }\n  }\n\n  public passTurn(): void {\n    if (this.isOver) {\n      return;\n    }\n\n    this.select(null);\n    this.currentTurn = this.currentTurn === PieceColor.White ? PieceColor.Black : PieceColor.White;\n  }\n\n  public move(piece: Piece, to: Position): void {\n    this.board.move(piece, to);\n\n    const opponent = this.currentTurn === PieceColor.White ? PieceColor.Black : PieceColor.White;\n    this.boardStatus = this.board.checkmate(opponent);\n\n    if (this.boardStatus === BoardStatus.Checkmate) {\n      this.winner = this.currentTurn;\n      this.selectedPiece = null;\n    } else if (this.boardStatus === BoardStatus.Stalemate) {\n      this.selectedPiece = null;\n    } else {\n      this.promoting = piece instanceof Pawn && piece.canBePromoted(this.board) ? piece : null;\n      if (!this.promoting) {\n        this.passTurn();\n      }\n    }\n  }\n\n  public promotePawn(promotion: PawnPromotion): void {\n    if (!this.promoting) {\n      throw new Error(\"No pawn to promote.\");\n    }\n    const pawn = this.promoting;\n    const piece = new promotion(pawn.position, pawn.color);\n    this.board.put(piece);\n    this.promoting = null;\n    this.passTurn();\n  }\n\n  public get isOver(): boolean {\n    return (\n      this.boardStatus === BoardStatus.Checkmate ||\n      this.boardStatus === BoardStatus.Stalemate\n    );\n  }\n}","import { action, computed, decorate, observable } from \"mobx\";\r\nimport GameState from \"../game/Game\";\r\n\r\ndecorate(GameState, {\r\n  board:         observable,\r\n  selectedPiece: observable,\r\n  currentTurn:   observable,\r\n  boardStatus:   observable,\r\n  promoting:     observable,\r\n  isOver:        computed,\r\n  select:        action.bound,\r\n  passTurn:      action.bound,\r\n  move:          action.bound,\r\n  promotePawn:   action.bound,\r\n});\r\n\r\nexport default GameState;\r\n\r\n","import { observer } from \"mobx-react\";\nimport React from 'react';\nimport './App.sass';\nimport Game from './components/Game';\nimport { initChessBoard } from \"./state/BoardState\";\nimport GameState from \"./state/GameState\";\n\nconst game = new GameState(initChessBoard());\n\nfunction App() {\n  return (\n    <Game game={game} />\n  );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}